import android.util.Log;

/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

String verb;
String archent_id;
Boolean isContext;
Boolean newContextGroupRel;
Boolean menu = true;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
    fetchOne("DROP VIEW IF EXISTS parentchild;", null);
    fetchOne( "CREATE VIEW parentchild AS "+
            "  SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb "+
            "    FROM (SELECT uuid, participatesverb, aenttypename, relationshipid"+
            "            FROM latestnondeletedaentreln "+
            "            JOIN relationship USING (relationshipid) "+
            "            JOIN latestnondeletedarchent USING (uuid) "+
            "            JOIN aenttype USING (aenttypeid)) parent "+
            "    JOIN (SELECT uuid, relationshipid, participatesverb "+
            "            FROM latestnondeletedaentreln "+
            "            JOIN relationship USING (relationshipid)) child "+
            "      ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid);", null);
}

makeLocalID();

//showWarning("Boncuklu Excavation 2014", "This module was generated by the FAIMS Team for the University of Queensland and Andrew Fairbairn under the auspices of an Australian Research Council LIEF grant.");
 
/*** control ***/
onEvent("control"                     , "show"  , "removeNavigationButtons(); setSearchTrench();");
onEvent("control/data"                , "show"  , "refreshEntities(); updateGPSDiagnostics();");
onEvent("control/data/newContext"     , "click" , "newContext();");
onEvent("control/data/newContextGroup", "click" , "newContextGroup(true);");
onEvent("control/search"              , "show"  , "search();");
onEvent("control/search/Search"       , "click" , "clearSearch()");
onEvent("control/search/searchButton" , "click" , "search()");
onEvent("control/search/entityTypes"  , "click" , "search()");
onEvent("control/search/Area_Code"    , "click" , "search()");
onEvent("control/search/entityList"   , "click" , "loadEntity();");

setSearchTrench() {
    setFieldValue("control/search/Area_Code", getFieldValue("user/usertab/Area_Code"));
}

clearSearch(){
    setFieldValue("control/search/Search","");
}

refreshEntities() {
    context_id = null;
    context_group_id = null;
    menu = false;
}

search(){
    String type = getFieldValue("control/search/entityTypes");
    String areaCode = getFieldValue("control/search/Area_Code");
    String term = getFieldValue("control/search/Search");
    String searchQuery = "SELECT uuid, response "+
                         "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                         " WHERE uuid in (SELECT uuid "+
                         "                    FROM latestNonDeletedArchEntIdentifiers "+
                         "                   WHERE attributename != 'Site Code' "+
                         "                     AND measure LIKE '"+term+"'||'%'  "+
                         "                     AND ( aenttypename LIKE '"+type+"' OR 'All' = '"+type+"' ) "+                         
                         "                  )  "+
                         "   AND (   'null' = '"+areaCode+"'  "+
                         "        OR uuid in (SELECT uuid "+
                         "                     FROM latestnondeletedaentvalue  "+
                         "                     JOIN attributekey using (attributeid) "+
                         "                    WHERE attributename = 'Trench' "+
                         "                      AND vocabid = '"+areaCode+"') "+
                         "       ) "+
                         " ORDER BY response "+
                         " LIMIT ? "+
                         "OFFSET ? ";
                  

    populateCursorList("control/search/entityList", searchQuery, 25);
    refreshTabgroupCSS("control");
    Log.d("Boncuklu Module", "Search query: " + searchQuery);
}

entityTypes = new ArrayList();
entityTypes.add(0, new NameValuePair("{All}", "All"));
entityTypes.add(new NameValuePair("{Context}", "Context"));
entityTypes.add(new NameValuePair("{Context_Group}", "Context Group"));
entityTypes.add(new NameValuePair("{Artefact_Group}", "Artefact Group"));
entityTypes.add(new NameValuePair("{Sample}", "Sample"));
entityTypes.add(new NameValuePair("{Matrix}", "Matrix"));
entityTypes.add(new NameValuePair("{Special_Find}", "Special Find"));
entityTypes.add(new NameValuePair("{Photograph_Log}", "Photograph Log"));
populateDropDown("control/search/entityTypes", entityTypes);

loadEntity() {
  loadEntityFrom(getListItemValue());
}

loadEntityFrom(String entityID) {
  if (!isNull(entityID)) {
    fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + entityID + "';", new FetchCallback() {
      onFetch(result) {
        String name = result.get(0).get(0);
        if (name.equals("Context")) {
          loadContextFrom(entityID);
        } else if (name.equals("Legacy")) {
          showWarning("{Alert}", "{This_is_a_legacy_identifier_and_is_not_viewable_on_the_device}");
        } else if (name.equals("Context Group")) {
          loadContextGroupFrom(entityID);
        } else if (name.equals("Artefact Group")) {
          loadArtefactGroupFrom(entityID);
        } else if (name.equals("Sample")) {
          loadSampleFrom(entityID);
        } else if (name.equals("Matrix")) {
          loadMatrixFrom(entityID);
        } else if (name.equals("Special Find")) {
          loadSpecialFindFrom(entityID);
        } else if (name.equals("Photograph Log")) {
          loadPhotoLogFrom(entityID);
        }
      }
    });
  } else {
    Log.e("PAZC Module", "Cannot load an entity with a null ID.");
  }
}

/* todo: determine if any of the following are still required
onEvent("control/data", "show", "refreshContexts()");
onEvent("control/data/ContextList", "click", "loadContext()");
onEvent("control/data/newContext", "click", "newContextFromControl();");
onEvent("control/data/Search", "click", "clearSearchContext()");
onEvent("control/data/searchButton", "click", "searchContext()");
onEvent("control/data/searchMyContext", "click", "searchMyContext()");

onEvent("control/sample", "show", "refreshSamples()");
onEvent("control/sample/Search", "click", "clearSearchSample()");
onEvent("control/sample/searchButton", "click", "searchSample()");
onEvent("control/sample/SampleList", "click", "loadSample(); menu = true");

onEvent("control/contextGroup", "show", "reloadGroupList()");
onEvent("control/contextGroup/newContextGroup", "click", "newContextGroup(true);newContextGroupRel = false;");
onEvent("control/contextGroup/GroupList", "click", "loadContextGroup();newContextGroupRel=false;");

refreshContexts() {
    context_id = null;
    context_group_id = null;
    menu = false;
    searchOrderedByTimestamp();
}

refreshSamples() {
    sample_id = null;
    menu = false;
    searchSample();
}


clearSearchContext(){
    setFieldValue("control/data/Search","");
}
*/

searchOrderedByTimestamp(){
    // TODO: this query can be simplified

    // populateList("control/data/ContextList", fetchAll(""+
    //     "SELECT uuid, group_concat(coalesce(measure   || ' '  || vocabname || '('  ||  freetext ||'; '|| (certainty * 100.0) || '% certain)',  "+
    //     "                                     measure   || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     measure   || ' '  || vocabname || ' (' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' || freetext  || ')',  "+
    //     "                                     measure   || ' (' || freetext  || ')',  "+
    //     "                                     measure   || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     freetext  || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     measure,  "+
    //     "                                     vocabname,  "+
    //     "                                     freetext), ' ') as response, valuetimestamp  "+
    //     "FROM (select * from latestNonDeletedArchentIdentifiers order by attributename) "+
    //     "WHERE aenttypename = 'Context' "+        
    //     "GROUP BY uuid "+
    //     "order by valuetimestamp desc limit 10;"));
}


searchContext(){
    // Todo: replace with pazc search query

    // populateList("control/data/ContextList", fetchAll(""+
    //     "SELECT uuid, group_concat(coalesce(measure   || ' '  || vocabname || '('  ||  freetext ||'; '|| (certainty * 100.0) || '% certain)',  "+
    //     "                                     measure   || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     measure   || ' '  || vocabname || ' (' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' || freetext  || ')',  "+
    //     "                                     measure   || ' (' || freetext  || ')',  "+
    //     "                                     measure   || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     freetext  || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     measure,  "+
    //     "                                     vocabname,  "+
    //     "                                     freetext), ' ') as response  "+
    //     "FROM (select * from latestNonDeletedArchentIdentifiers order by attributename) "+
    //     "WHERE aenttypename = 'Context' "+
    //     "and uuid in (select uuid from latestnondeletedaentvalue left outer join vocabulary using (vocabid) where freetext like '%"+getFieldValue("control/data/Search")+"%' or vocabname like '%"+getFieldValue("control/data/Search")+"%' or measure like '%"+getFieldValue("control/data/Search")+"%') "+
    //     "GROUP BY uuid "+
    //     "order by response;"));
}

searchMyContext() {
    // Todo: (Brian) pazc search query with modification to only find records created by current user

    // populateList("control/data/ContextList", fetchAll(""+
    //     "SELECT uuid, group_concat(coalesce(measure   || ' '  || vocabname || '('  ||  freetext ||'; '|| (certainty * 100.0) || '% certain)',  "+
    //     "                                     measure   || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     measure   || ' '  || vocabname || ' (' || (certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' || freetext  || ')',  "+
    //     "                                     measure   || ' (' || freetext  || ')',  "+
    //     "                                     measure   || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     vocabname || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     freetext  || ' (' ||(certainty * 100.0) || '% certain)',  "+
    //     "                                     measure,  "+
    //     "                                     vocabname,  "+
    //     "                                     freetext), ' ') as response  "+
    //     "FROM (select * from latestNonDeletedArchentIdentifiers where userid = "+userid+" order by attributename) "+
    //     "WHERE aenttypename = 'Context' "+
    //     "and uuid in (select uuid from latestnondeletedaentvalue left outer join vocabulary using (vocabid) where freetext like '%"+getFieldValue("control/data/Search")+"%' or vocabname like '%"+getFieldValue("control/data/Search")+"%' or measure like '%"+getFieldValue("control/data/Search")+"%') "+
    //     "GROUP BY uuid "+
    //     "order by response;"));    
}

clearSearchSample(){
    setFieldValue("control/sample/Search","");
}

searchSample(){
    String searchType;
    if(!getFieldValue("control/sample/SearchType").equals("All")) {
        searchType = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("control/sample/SearchType")+"';").get(0);    
    }
    
    // Todo: replace from pazc

    // populateList("control/sample/SampleList", fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response " +
    //     "FROM (select * from latestNonDeletedArchentIdentifiers order by case attributename when 'Sample ID' then 1 when 'Sample Type' then 2 else attributename end ) " +
    //     "WHERE aenttypename = 'Sample'  " +
    //     "and uuid in (select uuid  " +
    //         "from  latestnondeletedarchent join aenttype using (aenttypeid) join idealaent using (aenttypeid) join attributekey using (attributeid) left outer join latestnondeletedaentvalue using (uuid, attributeid) left outer join vocabulary using (vocabid)  " +
    //         "where ('" + getFieldValue("control/sample/SearchType") + "' = 'All'  " +
    //             "AND (freetext like '%"+getFieldValue("control/sample/Search")+"%'  " +
    //                 "or vocabname like '%"+getFieldValue("control/sample/Search")+"%'  " +
    //                 "or measure like '%"+getFieldValue("control/sample/Search")+"%' )) " +
    //         "OR ('" + getFieldValue("control/sample/SearchType") + "' != 'All'  " +
    //             "AND coalesce(vocabname, freetext) = '" + searchType + "' " +
    //             "AND attributename = 'Sample Type' " +
    //             "AND (freetext like '%"+getFieldValue("control/sample/Search")+"%' " +
    //             "or vocabname like '%"+getFieldValue("control/sample/Search")+"%' " +
    //             "or measure like '%"+getFieldValue("control/sample/Search")+"%' ))) " +
    //     "GROUP BY uuid  " +
    //     "order by response; "));
}

reloadGroupList(){
    populateList("control/contextGroup/GroupList", fetchEntityList("Context Group"));
}

loadSearchAttributes() {
    Object sampleTypes = makeVocab("Sample Type");
    ArrayList all = new ArrayList();
    all.add("All");
    all.add("All");
    sampleTypes.add(0,all);
    populateDropDown("control/sample/SearchType", sampleTypes);
}


/*** ArchEnt: Context **/
onEvent("Context", "show", "openContextTabs();");
onEvent("Context", "load", "showTab(\"Context/Context_Deposits\");");
onEvent("Context", "load", "showTab(\"Context/Context_Cuts\");");
onEvent("Context", "load", "showTab(\"Context/Context_Structures\");");

onEvent("Context/Context_GeneralInformation/Details","click","openContextTabs()");
onEvent("Context/Context_GeneralInformation/Add_Date_Closed", "click", "addCloseDate()");

onEvent("Context/Context_Attachments/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_GeneralInformation/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_GeneralInformation/Update2", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_Deposits/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_Structures/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Texture_Helper/Update_Texture", "click", "setTextureActual()");
onEvent("Context/Context_Deposits/Texture_Helper", "click", "helpSetTextureActual()");
onEvent("Context/Context_Cuts/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_Skeletons/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_Interpretation/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_Artefacts/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_Relationships_to_Other_Contexts/Update", "delayclick", "saveContext(\"\")");
onEvent("Context/Context_Samples/Update", "delayclick", "saveContext(\"\")");

onEvent("Context/Context_Deposits/newMatrix", "click", "saveContext(\"newMatrix();\")");
onEvent("Context/Context_Deposits/loadMatrix", "click", "loadMatrix()");
onEvent("Context/Context_Deposits/deleteMatrix", "click", "deleteMatrixFromContext()");

onEvent("Context/Context_Structures/Deposit", "click", "showTab(\"Context/Context_Deposits\")");

onEvent("Context/Context_Feature/AddContextGroup", "click", "saveContext(\"newContextGroup(false)\");newContextGroupRel = true;");
onEvent("Context/Context_Feature/ShowContextGroup", "click", "loadContextGroupFromContext();newContextGroupRel = false;");
onEvent("Context/Context_Feature/RemoveFromContextGroup", "click", "removeContextGroupReln()");
onEvent("Context/Context_Feature/AddContextGroupRel", "delayclick", "addContextGroupRel()");
onEvent("Context/Context_Feature/RelatedContextGroups", "click", "showCGFromList()");


onEvent("Context/Context_Attachments/attachPhoto", "click", "attachPictureTo(\"Context/Context_Attachments/Photo\")");
onEvent("Context/Context_Attachments/attachAudio", "click", "attachAudioTo(\"Context/Context_Attachments/Audio\")");
onEvent("Context/Context_Attachments/attachVideo", "click", "attachVideoTo(\"Context/Context_Attachments/Video\")");
onEvent("Context/Context_Attachments/attachSketch", "click", "attachFileTo(\"Context/Context_Attachments/Sketch\")");
onEvent("Context/Context_Attachments/viewattached", "click", "viewArchEntAttachedFiles(context_id)");
onEvent("Context/Context_Attachments/SaveAndNew", "delayclick", "saveContext(\"newContext();\")");
onEvent("Context/Context_Attachments/Duplicate", "delayclick", "saveContext(\"context_id = null; setFieldValue(\\\"Context/Context_GeneralInformation/Context_ID\\\", getFieldValue(\\\"control/data/ContextIncrement\\\"));\")");
onEvent("Context/Context_Attachments/Delete", "delayclick", "deleteContext()");

onEvent("Context/Context_Artefacts/newArtefactGroup", "delayclick", "saveContext(\"newArtefactGroup();\")");
onEvent("Context/Context_Artefacts/loadArtefactGroup", "click", "loadArtefactGroup()");
onEvent("Context/Context_Artefacts/deleteArtefactGroup", "delayclick", "deleteArtefactGroupFromContext()");
onEvent("Context/Context_Artefacts/newSpecialFind", "delayclick", "saveContext(\"newSpecialFind();\")");
onEvent("Context/Context_Artefacts/loadSpecialFind", "click", "loadSpecialFind()");
onEvent("Context/Context_Artefacts/deleteSpecialFind", "delayclick", "deleteSpecialFindFromContext()");

onEvent("Context/Context_Samples/newSample", "click", "saveContext(\"newSample();\")");
onEvent("Context/Context_Samples/loadSample", "click", "loadSample();");
onEvent("Context/Context_Samples/deleteSample", "click", "deleteSampleFromContext()");
onEvent("Context/Context_Samples/listOfSamples", "click", "showSampleFromList()");

onEvent("Context/Context_Attachments/newPhotoLog", "click", "saveContext(\"isContext=true;newPhotoLog();verb=\\\"ContextPhotographLog\\\";archent_id=context_id;\");");
onEvent("Context/Context_Attachments/loadPhotoLog", "click", "loadPhotoLog();verb=\"ContextPhotographLog\";archent_id=context_id;isContext=true");
onEvent("Context/Context_Attachments/deletePhotoLog", "click", "deletePhotoLogFromContext()");

onEvent("Context/Context_Deposits", "show", "updateAllContextMatrices()");
onEvent("Context/Context_Feature", "show", "updateAllContextGroups()");
onEvent("Context/Context_Relationships_to_Other_Contexts", "show", "updateAllContextRelationships()");
onEvent("Context/Context_Artefacts", "show", "updateAllContextArtefacts()");
onEvent("Context/Context_Samples", "show", "updateAllContextSamples()");
onEvent("Context/Context_Attachments", "show", "updateAllContextPhotologs()");

onEvent("Context/Context_Relationships_to_Other_Contexts/relate", "delayclick", "makeHierReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/showReln", "click", "loadContextFromReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/deleteReln", "delayclick", "deleteReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/listOfRelns", "click", "showRelnFromList()");

String context_id = null;
// Context ID, Context Type Your 
showRelnFromList(){
    // todo: unneccessary performanc hack, can be deleted 

    // listID = getListItemValue();
    
    // foo = fetchOne("select group_concat(response, '\n') from ( select attributename || ': ' || coalesce(vocabname, freetext) as response from ( " +
    //     "select uuid from latestnondeletedarchent join latestnondeletedaentreln using (uuid) " +
    //         "where uuid != "+context_id+" and relationshipid = "+listID+" ) " +
    //         "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) left outer join vocabulary using (attributeid, vocabid) " +
    //             "where attributename in ('Context ID', 'Context Type', 'Date Opened', 'Date Closed', 'Your Interpretation', 'Your description') " +
    //             "or attributename like '%Your Interpretation%' " +
    //             "and coalesce(vocabname, freetext) is not null " +
    //             "and coalesce(vocabname, freetext) != '{0No_Observation}' " +
    //         "group by uuid, attributename " +
    //     "order by case  when attributename = 'Context ID' then 1 when attributename =  'Context Type' then 2 when attributename like '%Your Interpretation%' then 3 when attributename =  'Your description' then 4 when attributename = 'Date Opened' then 5 when attributename =  'Date Closed' then 6 end); ");
    // if (!isNull(foo)){
    //     showToast(foo.get(0));
    // }
}

showCGRelnFromList(){
    // todo: as above

    // listID = getListItemValue();
    
    // foo = fetchOne("select group_concat(response, '\n') from ( select attributename || ': ' || coalesce(vocabname, freetext) as response from ( " +
    //     "select uuid from latestnondeletedarchent join latestnondeletedaentreln using (uuid) " +
    //         "where uuid != "+context_group_id+" and relationshipid = "+listID+" ) " +
    //         "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) left outer join vocabulary using (attributeid, vocabid) " +
    //             "where attributename in ('Context Group ID', 'Area Code', 'Site Code', 'Title', 'CG Your Interpretation', 'CG Your description', 'Your Discussion') " +
    //             "or attributename like '%Your Interpretation%' " +
    //             "and coalesce(vocabname, freetext) is not null " +
    //             "and coalesce(vocabname, freetext) != '{0No_Observation}' " +
    //         "group by uuid, attributename " +
    //   "order by case attributename when 'Context Group ID' then 1 when 'Area Code' then 2 when 'Site Code' then 3 when 'Title'then 4 when 'CG Your Interpretation' then 5 when 'CG Your description' then 6 when 'Your Discussion' then 7 end); ");
    // if (!isNull(foo)){
    //     showToast(foo.get(0));
    // }
}

showCGFromList(){
    // todo: as above

   //  listID = getListItemValue();
    
   // foo = fetchOne("select group_concat(response, '\n') from ( select attributename || ': ' || coalesce(vocabname, freetext) as response from ( " +
   //      "select uuid from latestnondeletedarchent join latestnondeletedaentreln using (uuid) " +
   //          "where uuid = "+listID+" ) " +
   //          "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) left outer join vocabulary using (attributeid, vocabid) " +
   //             "where attributename in ('Context Group ID', 'Area Code', 'Site Code', 'Title', 'CG Your Interpretation', 'CG Your description', 'Your Discussion') " +
   //             "and coalesce(vocabname, freetext) is not null " +
   //             "and coalesce(vocabname, freetext) != '{0No_Observation}' " +
   //         "group by uuid, attributename " +
   //    "order by case attributename when 'Context Group ID' then 1 when 'Area Code' then 2 when 'Site Code' then 3 when 'Title'then 4 when 'CG Your Interpretation' then 5 when 'CG Your description' then 6 when 'Your Discussion' then 7 end); ");
   //  if (!isNull(foo)){
   //      showToast(foo.get(0));
   //  }
}


showSampleFromList(){
    // todo: as above

    // listID = getListItemValue();
    // foo = fetchOne("select group_concat(response, '\n') from ( select attributename || ': ' || coalesce(vocabname, freetext) as response from ( " +
    //     "select uuid from latestnondeletedarchent join latestnondeletedaentreln using (uuid) " +
    //         "where uuid = "+listID+" ) " +
    //         "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) left outer join vocabulary using (attributeid, vocabid) " +
    //            "where attributename in ('Sample ID', 'Sample Volume', 'Sample Comments', 'Sample Type') " +
    //            "and coalesce(vocabname, freetext) is not null " +
    //            "and coalesce(vocabname, freetext) != '{0No_Observation}' " +
    //        "group by uuid, attributename " +
    //   "order by case attributename when 'Sample ID' then 1 when 'Sample Type' then 2 when 'Sample Volume' then 3 when 'Sample Comments' then 4 end); ");
    // if (!isNull(foo)){
    //     showToast(foo.get(0));
    // }
}

showContextFromList(){
    // todo: as above

    // listID = getListItemValue();
    // foo = fetchOne("select group_concat(response, '\n') from ( select attributename || ': ' || coalesce(vocabname, freetext) as response from ( " +
    //     "select uuid from latestnondeletedarchent join latestnondeletedaentreln using (uuid) " +
    //         "where uuid = "+listID+" ) " +
    //         "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) left outer join vocabulary using (attributeid, vocabid) " +
    //             "where attributename in ('Context ID', 'Context Type', 'Date Opened', 'Date Closed', 'Your Interpretation', 'Your description') " +
    //             "or attributename like '%Your Interpretation%' " +
    //             "and coalesce(vocabname, freetext) is not null " +
    //             "and coalesce(vocabname, freetext) != '{0No_Observation}' " +
    //         "group by uuid, attributename " +
    //     "order by case  when attributename = 'Context ID' then 1 when attributename =  'Context Type' then 2 when attributename like '%Your Interpretation%' then 3 when attributename =  'Your description' then 4 when attributename = 'Date Opened' then 5 when attributename =  'Date Closed' then 6 end); ");
    // if (!isNull(foo)){
    //     showToast(foo.get(0));
    // }
}

newContext(){
    context_id = null;
    newTabGroup("Context");
    // todo: (brian) is this replaced with static string for site code?
    // date = fetchOne("select date('now');");
    setFieldValue("Context/Context_GeneralInformation/Trench", areaCode);
    // setFieldValue("Context/Context_GeneralInformation/Site_Code","BK" + date.get(0).charAt(2) + date.get(0).charAt(3));
    setFieldValue("Context/Context_GeneralInformation/Context_ID", getFieldValue("control/data/ContextIncrement"));
    setFieldValue("Context/Context_GeneralInformation/CreatingUser", username);
    String date2 = new java.text.SimpleDateFormat("d-MMM-yy").format(new Date());
    setFieldValue("Context/Context_GeneralInformation/Date_Opened", date2);
    // todo: replace with set timestamp
    // datetime = fetchOne("select datetime('now', 'localtime');");
    // setFieldValue("Context/Context_GeneralInformation/CreatingDate", datetime.get(0));
}

newContextFromControl() {
    if(isNull(getFieldValue("control/data/ContextIncrement"))) {
        showWarning("Validation Error", "You must enter a Context ID to create a Context record.");
        return;
    }
    // todo: replace with dumb autonumbering
    // String query = "select count(distinct uuid) from latestnondeletedaentvalue where freetext = '"+getFieldValue("control/data/ContextIncrement")+"';";
    Object obj = fetchOne(query);
    if(obj.get(0).equals("0")) {
        newContext();
    } else {
        showWarning("Validation Error", "That Context ID has been used for another Context. Please enter another one.");
    }
}

loadContext() {
    context_id = getListItemValue();
    loadContextFrom(context_id);    
}

loadContextFrom(contextid) {
    context_id = contextid;
    if (isNull(context_id)) return;
    
    showTabGroup("Context", context_id, new FetchCallback() {
      onFetch(result) {
        openContextTabs(true);
      }
    });

    // todo: replace with context data schema property for creating user and creating date?

    // Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+context_id+"' group by uuid having min(aenttimestamp)");
    // setFieldValue("Context/Context_GeneralInformation/CreatingUser", foo.get(0));
    // Object bar = fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+context_id+"' group by uuid having min(aenttimestamp);");
    // setFieldValue("Context/Context_GeneralInformation/CreatingDate", bar.get(0));  
}

saveContext(String callback) {
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save Context without Context Code");
        showTab("Context/Context_GeneralInformation");
        return;
    }
    if (!isNull(context_id)) {
        entity = fetchArchEnt(context_id);
    }
    saveTabGroup("Context", context_id, null, null, "context_id = getLastSavedRecordId();getCounterFromDB();" + callback);
}

deleteContext(){
    if (!isNull(context_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Context!", "reallyDeleteContext()", "doNotDelete()");
    } else {
        cancelTabGroup("Context", true);
    }
}

reallyDeleteContext(){
    deleteArchEnt(context_id);
    cancelTabGroup("Context", false);
    getCounterFromDB();
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

getCounterFromDB(){
    // todo: replace with dumb autonumbering
    // Object counter = fetchOne("select vocabname || letters as foo from countingIsHard, (select vocabname from localsettings join vocabulary on (value=vocabid) where key = 'Area') where foo not in (select freetext from latestNonDeletedArchEntIdentifiers where attributename = 'Context ID') order by letters limit 1 ;");
    // setFieldValue("control/data/ContextIncrement", counter.get(0));
}

loadContextFromReln(){
    // todo: replace from pazc
    // String relnid = getFieldValue("Context/Context_Relationships_to_Other_Contexts/listRelns");
    // if (!isNull(relnid)){   
    //     Object uuid = fetchOne("select uuid from latestNonDeletedAentReln where relationshipID = '"+relnid+"' and uuid != '"+context_id+"';");
    //     context_id = uuid.get(0);
    //     loadContextFrom(uuid.get(0));
    // }
}

deleteReln(){
    // todo: replace from pazc
    // relnid = getFieldValue("Context/Context_Relationships_to_Other_Contexts/listRelns");
    
    // String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '"+userid+"' from latestnondeletedaentreln where relationshipid = '"+relnid+"';";
    
    // fetchOne(query);
    // deleteRel(relnid);
    // updateRelns();
}

deleteRelnCG(){
    // todo: already refactored
    // relnid = getFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/listRelns");
    
    // String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '"+userid+"' from latestnondeletedaentreln where relationshipid = '"+relnid+"';";
    
    // fetchOne(query);
    // deleteRel(relnid);
    // updateRelns();
}

updateAllContextMatrices() {
    // todo: replace from pazc
    // Object contextMatrices = new ArrayList();
    // if (!isNull(context_id)){
    //     contextMatrices = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Matrix'\n"+
    //         "             AND uuid in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                     where uuid = "+context_id+"\n"+
    //         "                                                       and relntypeName = 'ContextMatrix')\n"+
    //         "                             and uuid != "+context_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;");
    // }
    // populateDropDown("Context/Context_Deposits/matrixList",  contextMatrices);
}

updateAllContextGroups() {
    // todo: replace from pazc
    // Object contextGroups = new ArrayList();
    // if (!isNull(context_id)){

    //     contextGroups = fetchAll("select uuid, response " +
    //       "from identifierAsSpreadsheet " +
    //       "join (select uuid from latestnondeletedarchent join aenttype using (aenttypeid) where aenttypename = 'Context Group') as contextGroup using (uuid) " +
    //       "join (select uuid, relationshipid, aentrelntimestamp from latestnondeletedaentreln join latestnondeletedrelationship using (relationshipid) join relntype using (relntypeid) where relntypename = 'ContextContextGroup') using (uuid) " +
    //       "join (select uuid as childuuid, relationshipid from latestnondeletedarchent join aenttype using (aenttypeid) join latestnondeletedaentreln using (uuid) where aenttypename = 'Context') using (relationshipid) " +
    //       "where childuuid = " + context_id + " " +
    //       "order by aentrelntimestamp desc;");
    // }
    // populateDropDown("Context/Context_Feature/ContextGroupList",  contextGroups);
    // populateList("Context/Context_Feature/RelatedContextGroups",  contextGroups);
    // populateDropDown("Context/Context_Feature/ContextGroupListUnrelated", 
    //     fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Context Group'\n"+
    //         "             AND uuid not in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                     where uuid = "+context_id+"\n"+
    //         "                                                       and relntypeName = 'ContextContextGroup')\n"+
    //         "                             and uuid != "+context_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;"));
}

updateAllContextArtefacts(){
    // todo: replace from pazc
    // Object localArtefactGroup = new ArrayList();
    // Object localSpecialFind = new ArrayList();
    // if (!isNull(context_id)){
    //     localArtefactGroup = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Artefact Group'\n"+
    //         "             AND uuid in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                    where uuid = "+context_id+"\n"+
    //         "                                                       and relntypeName = 'ContextArtefactGroup')\n"+
    //         "                             and uuid != "+context_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;");
    //     localSpecialFind = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Special Find'\n"+
    //         "             AND uuid in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                     where uuid = "+context_id+"\n"+
    //         "                                                       and relntypeName = 'ContextSpecialFind')\n"+
    //         "                             and uuid != "+context_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;");
    // }
    // populateDropDown("Context/Context_Artefacts/artefactGroupList", localArtefactGroup);
    // populateDropDown("Context/Context_Artefacts/specialFindList", localSpecialFind);
}

updateAllContextSamples(){
    // todo: replace from pazc
    // Object localSample = new ArrayList();
    // if (!isNull(context_id)){
    //     localSample = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Sample'\n"+
    //         "             AND uuid in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                     where uuid = "+context_id+"\n"+
    //         "                                                       and relntypeName = 'ContextSample')\n"+
    //         "                             and uuid != "+context_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;");
    // }
    // populateDropDown("Context/Context_Samples/sampleList", localSample);
    // populateList("Context/Context_Samples/listOfSamples", localSample);
}

updateAllContextRelationships(){
    //  update all context relationships
    // setFieldValue("Context/Context_Relationships_to_Other_Contexts/context_id", getFieldValue("Context/Context_GeneralInformation/Context_ID"));

    // Object contextList = new ArrayList();
    
    // if (!isNull(context_id)){
    //     contextList = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from latestNonDeletedArchEntIdentifiers where aenttypename = 'Context' and uuid != '"+context_id+"' group by uuid;" );
    // }    
    // populateDropDown("Context/Context_Relationships_to_Other_Contexts/context", contextList);
    // updateRelns();
}

updateAllContextPhotologs() {
    // todo: replace from pazc
    // Object contextPhotologs = new ArrayList();
    // if (!isNull(context_id)){
    //     contextPhotologs = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Photograph Log'\n"+
    //         "             AND uuid in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                     where uuid = "+context_id+"\n"+
    //         "                                                       and relntypeName = 'ContextPhotographLog')\n"+
    //         "                             and uuid != "+context_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;");
    // }
    // populateDropDown("Context/Context_Attachments/PhotoLogList",  contextPhotologs);
}

makeHierReln(){
    // todo: replace from pazc
    // if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
    //     showWarning("Logic Error", "Cannot save record without id");
    //     return;
    // }

    // if (isNull(context_id)){
    //     showToast("You must have saved your entity.");
    //     return;
    // }
    // String[] arguments = getFieldValue("Context/Context_Relationships_to_Other_Contexts/reln").split("~!~");
    // String dest = getFieldValue("Context/Context_Relationships_to_Other_Contexts/context");

    // saveEntitiesToHierRel(arguments[0], context_id, dest, arguments[1], arguments[2]);
    // updateRelns();
}

updateRelns(){
    // todo: replace from pazc
    // Object contextRelnList = fetchAll("select parent.relationshipid, parent.participatesverb || ' ' || child.response "+
    //     "from (latestNonDeletedAentReln) parent  "+
    //     "join (latestNonDeletedAentReln join identifierAsSpreadsheet using (uuid)) child on (parent.relationshipid = child.relationshipid and parent.uuid != child.uuid) "+
    //     "join latestNonDeletedRelationship using (relationshipid) join relntype using (relntypeid) "+
    //     "where relntypename not like 'Context%' "+        
    //     "and parent.uuid = '"+context_id+"'  "+
    //     "order by relntimestamp desc");
    
    // populateDropDown("Context/Context_Relationships_to_Other_Contexts/listRelns", contextRelnList);
    // populateList("Context/Context_Relationships_to_Other_Contexts/listOfRelns", contextRelnList);
}

loadContextAttributes(){
    populatePictureGallery("Context/Context_GeneralInformation/Context_Type", makePictureGallery("Context Type"));
    populateCheckBoxGroup("Context/Context_GeneralInformation/Excavation_Method", makeVocab("Excavation Method"));
    populateDropDown("Context/Context_GeneralInformation/Horizon_Boundary", makeVocab("Horizon Boundary"));
    populateDropDown("Context/Context_GeneralInformation/Contamination", makeVocab("Contamination"));

    populateHierarchicalDropDown("Context/Context_Deposits/Soil_Compaction_Type", "Soil Compaction Type");
    populateDropDown("Context/Context_Deposits/Soil_Texture", makeVocab("Soil Texture"));
    populateRadioGroup("Context/Context_Deposits/Sterile", makeVocab("Sterile"));
    populateHierarchicalPictureGallery("Context/Context_Deposits/Soil_Particle_Sorting", "Soil Particle Sorting");
    populateDropDown("Context/Context_Deposits/Your_Interpretation", makeVocab("Deposit Your Interpretation"));
    populateDropDown("Context/Context_Deposits/Composition_Type", makeVocab("Composition Type"));
    populateDropDown("Context/Context_Deposits/Deposit_Bedding", makeVocab("Deposit Bedding"));
    populateRadioGroup("Context/Context_Deposits/Sterile", makeVocab("Sterile"));

    populateDropDown("Context/Context_Cuts/Shape_of_Cut", makeVocab("Shape of Cut"));
    populateRadioGroup("Context/Context_Cuts/Shape_of_Corners", makeVocab("Shape of Corners"));
    populateRadioGroup("Context/Context_Cuts/Break_of_Slope_Top", makeVocab("Break of Slope - Top"));
    populateHierarchicalDropDown("Context/Context_Cuts/Shape_of_Base", "Shape of Base");
    populateRadioGroup("Context/Context_Cuts/Orientation", makeVocab("Orientation"));
    populateDropDown("Context/Context_Cuts/Your_Interpretation", makeVocab("Cut Your Interpretation"));
    populateHierarchicalDropDown("Context/Context_Cuts/Sides_of_Cut", "Sides of Cut");
    populateDropDown("Context/Context_Cuts/Inclination_of_axis", makeVocab("Inclination of axis"));

    populateDropDown("Context/Context_Structures/Structure_Shape", makeVocab("Structure Shape"));
    populateDropDown("Context/Context_Structures/Structural_Components", makeVocab("Structural Components"));
    populateDropDown("Context/Context_Structures/Bonding", makeVocab("Bonding"));
    populateDropDown("Context/Context_Structures/Mudbrick_Shape", makeVocab("Mudbrick Shape"));
    populateDropDown("Context/Context_Structures/Your_Interpretation", makeVocab("Structure Your Interpretation"));

    populateHierarchicalDropDown("Context/Texture_Helper/Soil_Texture", "Soil Texture Helper");

    // todo: replace with pazc relation list query
    // relnList = fetchAll("select relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid from relntype where relntypename not like '%Context%' and relntypename not like 'Rebuilt%' union select relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid from relntype where relntypename not like '%Context%' and relntypename not like 'Rebuilt%' order by relntypeid, name;");
    // populateDropDown("Context/Context_Relationships_to_Other_Contexts/reln", relnList);
}

openContextTabs(){
    Object name = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("Context/Context_GeneralInformation/Context_Type")+"';");
    if (!isNull(name)){
        String vocab = name.get(0);
        if ((vocab.equals("{Deposit}")) || (vocab.equals("{Natural}"))){
            cancelTab("Context/Context_Cuts", false);
            cancelTab("Context/Context_Structures", false);
            cancelTab("Context/Context_Skeletons", false);
            showTab("Context/Context_Deposits");
        } else if (vocab.equals("{Cut}")){
            cancelTab("Context/Context_Deposits", false);
            cancelTab("Context/Context_Structures", false);
            cancelTab("Context/Context_Skeletons", false);
            showTab("Context/Context_Cuts");
        } else if (vocab.equals("{Structure}")){
            cancelTab("Context/Context_Cuts", false);
            cancelTab("Context/Context_Skeletons", false);
            showTab("Context/Context_Deposits");
            showTab("Context/Context_Structures");
        } else if (vocab.equals("{Skeleton}")){
            cancelTab("Context/Context_Deposits", false);
            cancelTab("Context/Context_Cuts", false);
            cancelTab("Context/Context_Structures", false);
            showTab("Context/Context_Skeletons");
        }
    } else {
        cancelTab("Context/Context_Cuts", false);
        cancelTab("Context/Context_Deposits", false);
        cancelTab("Context/Context_Structures", false);
        cancelTab("Context/Context_Skeletons", false);
    }
}

helpSetTextureActual(){
    showTab("Context/Texture_Helper");
}

setTextureActual(){
    // todo: replace from pazc
    // Object textureToSet = fetchOne("select vocabid from vocabulary join attributekey using (attributeid)where attributeName = 'Soil Texture' and vocabname = (select vocabname "
    //      + "from vocabulary join attributekey using (attributeid) "
    //      + "where trim(vocabname,'{}1234567890.') like (select trim(vocabname,'{}1234567890.')  from vocabulary where vocabid = '"+ getFieldValue("Context/Texture_Helper/Soil_Texture") +"') "
    //      + "and attributeName = 'Soil Texture'); ");
    // print(textureToSet);
    // if(!isNull(textureToSet)){
    //     setFieldValue("Context/Context_Deposits/Soil_Texture", textureToSet.get(0));
    // }
    // cancelTab("Context/Texture_Helper", false);
    // showTab("Context/Context_Deposits");
}

addContextGroupRel(){
    if (isNull(context_id)) {
        saveContext("saveEntitiesToRel(\"ContextContextGroup\", getFieldValue(\"Context/Context_Feature/ContextGroupListUnrelated\"), context_group_id);updateAllContextGroups();");
    } else {
        saveEntitiesToRel("ContextContextGroup", getFieldValue("Context/Context_Feature/ContextGroupListUnrelated"), context_id);
        updateAllContextGroups();
    }
}

removeContextGroupReln() {
    // todo: pazcify
    // context_group_id = getFieldValue("Context/Context_Feature/ContextGroupList");
    // if(!isNull(context_id) && !isNull(context_group_id)) {
    //     Object obj = fetchOne("select context.uuid, contextgroup.uuid, relationshipid  " +
    //         "from latestnondeletedaentreln context join latestnondeletedaentreln contextgroup using (relationshipid) " +
    //         "where context.uuid != contextgroup.uuid " +
    //         "and context.uuid = " + context_id + " " +
    //         "and contextgroup.uuid = " + context_group_id + ";");
    //     String relnid = obj.get(2);
    //     if(!isNull(relnid)) {
    //         String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '" + userid + "' from latestnondeletedaentreln where relationshipid = '" + relnid + "';";
    //         fetchOne(query);
    //         deleteRel(relnid);
    //         updateAllContextGroups();
    //     }
        
    // }
}

addCloseDate() {
    //date = fetchOne("select date('now');");
    //setFieldValue("Context/Context_GeneralInformation/Date_Closed", date.get(0));    
    String date = new java.text.SimpleDateFormat("d-MMM-yy").format(new Date());
    setFieldValue("Context/Context_GeneralInformation/Date_Closed", date);    
}

/*** RelnEnt: Context Group***/
onEvent("ContextGroup/ContextGroup_Details/Update", "delayclick", "saveContextGroup(\"\")");

onEvent("ContextGroup/ContextGroup_Contexts/AddContext", "click", "addToContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/ShowContext", "click", "loadContextFromContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/RemoveContext", "click", "removeFromContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/Update", "delayclick", "saveContextGroup(\"\")");
onEvent("ContextGroup/ContextGroup_Contexts/listOfContexts", "click", "showContextFromList()");

onEvent("ContextGroup/Feature_Relationships_to_Other_Features/relate", "delayclick", "makeHierRelnCG()");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features", "show", "updateContextGroupRelationships()");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/Update", "delayclick", "saveContextGroup(\"\")");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/listOfRelns", "click", "showCGRelnFromList()");
onEvent("ContextGroup/Feature_Relationships_to_Other_Features/deleteReln", "click", "deleteRelnCG()");

onEvent("ContextGroup/ContextGroup_Attachments", "show", "updateAllContextGroupPhotologs()");
onEvent("ContextGroup/ContextGroup_Attachments/attachPhoto", "click", "attachPictureTo(\"ContextGroup/ContextGroup_Attachments/Photo\")");
onEvent("ContextGroup/ContextGroup_Attachments/attachAudio", "click", "attachAudioTo(\"ContextGroup/ContextGroup_Attachments/Audio\")");
onEvent("ContextGroup/ContextGroup_Attachments/attachVideo", "click", "attachVideoTo(\"ContextGroup/ContextGroup_Attachments/Video\")");
onEvent("ContextGroup/ContextGroup_Attachments/attachSketch", "click", "attachFileTo(\"ContextGroup/ContextGroup_Attachments/Sketch\")");
onEvent("ContextGroup/ContextGroup_Attachments/viewattached", "click", "viewArchEntAttachedFiles(context_group_id)");
onEvent("ContextGroup/ContextGroup_Attachments/Update", "delayclick", "saveContextGroup(\"\")");
onEvent("ContextGroup/ContextGroup_Attachments/SaveAndNew", "delayclick", "saveContextGroup(\"newContextGroup(true);\")");
onEvent("ContextGroup/ContextGroup_Attachments/SaveAndClose", "delayclick", "saveContextGroup(\"cancelTabGroup(\\\"ContextGroup\\\",false);\")");
onEvent("ContextGroup/ContextGroup_Attachments/Duplicate", "delayclick", "saveContextGroup(\"context_group_id=null;autoNumFeature();\")");
onEvent("ContextGroup/ContextGroup_Attachments/Delete", "click", "deleteContextGroup()");
onEvent("ContextGroup/ContextGroup_Attachments/newPhotoLog", "delayclick", "saveContextGroup(\"isContext=false;newPhotoLog();verb=\\\"ContextGroupPhotographLog\\\";archent_id=context_group_id;\");");
onEvent("ContextGroup/ContextGroup_Attachments/loadPhotoLog", "click", "loadContextGroupPhotoLog();verb=\"ContextGroupPhotographLog\";archent_id=context_group_id;isContext=false");
onEvent("ContextGroup/ContextGroup_Attachments/deletePhotoLog", "click", "deletePhotoLogFromContextGroup()");

String context_group_id = null;

newContextGroup(menu){
    if (!menu && isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    newTabGroup("ContextGroup");
    context_group_id = null;
    // todo: same as others
    // date = fetchOne("select datetime('now', 'localtime');");
    // setFieldValue("ContextGroup/ContextGroup_Details/DateRecorded", date.get(0));
    // setFieldValue("ContextGroup/ContextGroup_Details/Site_Code","BK" + date.get(0).charAt(2) + date.get(0).charAt(3));
    setFieldValue("ContextGroup/ContextGroup_Details/Area_Code", areaCode);
    setFieldValue("ContextGroup/ContextGroup_Details/CreatingUser", username);
    autoNumFeature();
    populateContextGroup();
}

loadContextGroup(){
    context_group_id = getListItemValue();
    loadContextGroupFrom(context_group_id);
}

loadContextGroupFrom(String id){
  context_group_id = id;
    showTabGroup("ContextGroup", context_group_id);
    populateContextGroup();
    // todo: replace with tabgroup data schema properties?
    // Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+context_group_id+"' group by uuid having min(aenttimestamp)");
    // setFieldValue("ContextGroup/ContextGroup_Details/CreatingUser", foo.get(0));
    // Object bar = fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+context_group_id+"' group by uuid having min(aenttimestamp);");
    // setFieldValue("ContextGroup/ContextGroup_Details/DateRecorded", bar.get(0));
}

loadContextGroupFromContext() {
    context_group_id = getFieldValue("Context/Context_Feature/ContextGroupList");
    if (isNull(context_group_id)) return;
    showTabGroup("ContextGroup", context_group_id);
    populateContextGroup();
    // todo: replace with data schema properties
    // Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+context_group_id+"' group by uuid having min(aenttimestamp)");
    // setFieldValue("ContextGroup/ContextGroup_Details/CreatingUser", foo.get(0));
    // Object bar = fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+context_group_id+"' group by uuid having min(aenttimestamp);");
    // setFieldValue("ContextGroup/ContextGroup_Details/DateRecorded", bar.get(0));
    updateRelns();

}

saveContextGroup(String callback){
    if (isNull(context_group_id)) context_group_id = null;
    if (isNull(getFieldValue("ContextGroup/ContextGroup_Details/Title"))) {
        showWarning("Validation Error", "Feature requires a title to be saved.");
        return;
    }
    saveTabGroup("ContextGroup", context_group_id, null, null, "context_group_id = getLastSavedRecordId();onContextGroupSaved();populateContextGroup();" + callback);
}

onContextGroupSaved(){
    if(newContextGroupRel) {
        context_group_id = getLastSavedRecordId();
        saveEntitiesToRel("ContextContextGroup", context_id, context_group_id);
    }
}

addToContextGroup() {
    if (isNull(context_group_id)) {
        saveContextGroup("saveEntitiesToRel(\"ContextContextGroup\", getFieldValue(\"ContextGroup/ContextGroup_Contexts/AddContextList\"), context_group_id);populateContextGroup();");
        return;
    }
    saveEntitiesToRel("ContextContextGroup", getFieldValue("ContextGroup/ContextGroup_Contexts/AddContextList"), context_group_id);
    populateContextGroup();
}

populateContextGroup() {
    // todo: pazcify
    // populateDropDown("ContextGroup/ContextGroup_Contexts/AddContextList", 
    //     fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Context'\n"+
    //         "             AND uuid not in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                     where uuid = "+context_group_id+"\n"+
    //         "                                                       and relntypeName = 'ContextContextGroup')\n"+
    //         "                             and uuid != "+context_group_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;"));
    // Object contextsInGroup = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Context'\n"+
    //         "             AND uuid in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                     where uuid = "+context_group_id+"\n"+
    //         "                                                       and relntypeName = 'ContextContextGroup')\n"+
    //         "                             and uuid != "+context_group_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;");
    populateDropDown("ContextGroup/ContextGroup_Contexts/ContextList", contextsInGroup);
    populateList("ContextGroup/ContextGroup_Contexts/listOfContexts", contextsInGroup);
}

loadContextGroupAttributes(){
    // todo: pazcify
    // populateDropDown("ContextGroup/ContextGroup_Details/Context_Type", makeVocab("CG Context Type"));
    // relnList = fetchAll("select relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid from relntype where relntypename not like '%Context%' and relntypename not like 'Rebuilt%' union select relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid from relntype where relntypename not like '%Context%' and relntypename not like 'Rebuilt%' order by relntypeid, name;");
    // populateDropDown("ContextGroup/Feature_Relationships_to_Other_Features/reln", relnList);
}

loadContextFromContextGroup(){
    loadContextFrom(getFieldValue("ContextGroup/ContextGroup_Contexts/ContextList"));
}

deleteContextGroup(){
    if (!isNull(context_group_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Context Group!", "reallyDeleteContextGroup()", "doNotDelete()");
    }
}

reallyDeleteContextGroup(){
    deleteArchEnt(context_group_id);
    cancelTabGroup("ContextGroup", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

removeFromContextGroup() {
    // todo: pazcify
    // context_id = getFieldValue("ContextGroup/ContextGroup_Contexts/ContextList");
    // if(!isNull(context_id) && !isNull(context_group_id)) {
    //     Object obj = fetchOne("select context.uuid, contextgroup.uuid, relationshipid  " +
    //         "from latestnondeletedaentreln context join latestnondeletedaentreln contextgroup using (relationshipid) " +
    //         "where context.uuid != contextgroup.uuid " +
    //         "and context.uuid = " + context_id + " " +
    //         "and contextgroup.uuid = " + context_group_id + ";");
    //     String relnid = obj.get(2);
    //     if(!isNull(relnid)) {
    //         String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '" + userid + "' from latestnondeletedaentreln where relationshipid = '" + relnid + "';";
    //         fetchOne(query);
    //         deleteRel(relnid);
    //         populateContextGroup();
    //     }
        
    // }
}

updateAllContextGroupPhotologs() {
    // todo: pazcify
    // Object contextGroupPhotologs = new ArrayList();
    // if (!isNull(context_group_id)){
    //     contextGroupPhotologs = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
    //         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
    //         "            FROM latestNonDeletedArchentIdentifiers\n"+
    //         "           WHERE aenttypename = 'Photograph Log'\n"+
    //         "             AND uuid in (select uuid\n"+
    //         "                            FROM latestNonDeletedAentReln\n"+
    //         "                           where relationshipid in (select relationshipid\n"+
    //         "                                                      FROM latestNonDeletedAentReln\n"+
    //         "                                                      JOIN relationship using (relationshipid)\n"+
    //         "                                                      JOIN relntype using (relntypeid)\n"+
    //         "                                                     where uuid = "+context_group_id+"\n"+
    //         "                                                       and relntypeName = 'ContextGroupPhotographLog')\n"+
    //         "                             and uuid != "+context_group_id+")\n"+
    //         "        ORDER BY uuid, attributename ASC)\n"+
    //         "group by uuid\n"+
    //         "order by valuetimestamp desc, uuid, attributename;");
    // }
    // populateDropDown("ContextGroup/ContextGroup_Attachments/PhotoLogList",  contextGroupPhotologs);
}

deletePhotoLogFromContextGroup(){
    photolog_id = getFieldValue("ContextGroup/ContextGroup_Attachments/PhotoLogList");
    if (!isNull(photolog_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Photograph Log!", "reallyDeletePhotoLog()", "doNotDelete()");
    }
}

autoNumFeature(){
    // todo:  dumb autonumbering
    // Object counter = fetchOne("select 'F' ||foo as foo " +
    //   "from (select max(cast(substr(freetext,2) as integer))+1 as foo " +
    //          "from latestnondeletedaentvalue join attributekey using (attributeid) " +
    //         "where uuid in (select uuid " +
    //                          "from latestnondeletedaentvalue ae " +
    //                          "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
    //                         "where aenttypename = 'Context Group') " +
    //           "and attributename = 'Context Group ID');");
    // print(counter);
    // if(isNull(counter.get(0))) {
    //     setFieldValue("ContextGroup/ContextGroup_Details/Context_Group_ID", "F1");
    // } else {
    //     setFieldValue("ContextGroup/ContextGroup_Details/Context_Group_ID", counter.get(0));    
    // }
    
}

updateContextGroupRelationships(){
    // todo: refactored?
    // setFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/feature_id", getFieldValue("ContextGroup/ContextGroup_Details/Context_Group_ID"));
    // featureList = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') " +
    //     "as response from latestNonDeletedArchEntIdentifiers " +
    //         "where aenttypename = 'Context Group' and uuid != '"+context_group_id+"' group by uuid;");
    // populateDropDown("ContextGroup/Feature_Relationships_to_Other_Features/feature", featureList);
    // updateRelnsCG();
}

makeHierRelnCG(){
    if (isNull(getFieldValue("ContextGroup/ContextGroup_Details/Title"))) {
        showWarning("Logic Error", "Cannot save record without title");
        return;
    }

    if (isNull(context_group_id)){
        showToast("You must have saved your entity.");
        return;
    }
    String[] arguments = getFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/reln").split("~!~");
    String dest = getFieldValue("ContextGroup/Feature_Relationships_to_Other_Features/feature");

    saveEntitiesToHierRel(arguments[0], context_group_id, dest, arguments[1], arguments[2]);
    updateRelnsCG();

}

updateRelnsCG(){
    // todo: refactored?
    // Object featureRelnList = fetchAll("select parent.relationshipid, parent.participatesverb || ' ' || child.response "+
    //     "from (latestNonDeletedAentReln) parent  "+
    //     "join (latestNonDeletedAentReln join identifierAsSpreadsheet using (uuid)) child on (parent.relationshipid = child.relationshipid and parent.uuid != child.uuid) "+
    //     "join latestNonDeletedRelationship using (relationshipid) join relntype using (relntypeid) "+
    //     "where relntypename not like 'Context%' "+
    //     "and parent.uuid = '"+context_group_id+"'  "+
    //     "order by relntimestamp desc");
    
    // populateDropDown("ContextGroup/Feature_Relationships_to_Other_Features/listRelns", featureRelnList);
    // populateList("ContextGroup/Feature_Relationships_to_Other_Features/listOfRelns", featureRelnList);
}

/*** Artefact Group ***/
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Artefact_Group/Artefact_Group_GeneralInformation/Photo\")");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/attachAudio", "click", "attachAudioTo(\"Artefact_Group/Artefact_Group_GeneralInformation/Audio\")");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/attachVideo", "click", "attachVideoTo(\"Artefact_Group/Artefact_Group_GeneralInformation/Video\")");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/attachSketch", "click", "attachFileTo(\"Artefact_Group/Artefact_Group_GeneralInformation/Sketch\")");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/viewattached", "click", "viewArchEntAttachedFiles(artefact_group_id)");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/Update", "delayclick", "saveArtefactGroup()");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/SaveAndNew", "delayclick", "saveAndNewArtefactGroup()");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/Delete", "delayclick", "deleteArtefactGroup()");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/Duplicate", "delayclick", "duplicateArtefactGroup()");

String artefact_group_id = null;

newArtefactGroup(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    artefact_group_id = null;
    newTabGroup("Artefact_Group");
    setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    // todo: same as others
    // date = fetchOne("select date('now');");
    // setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Site_Code","BK" + date.get(0).charAt(2) + date.get(0).charAt(3));
    autoNumArtefactGroup();
}

loadArtefactGroup() {
    artefact_group_id = getListItemValue();
    loadArtefactGroupFrom(artefact_group_id);
}

loadArtefactGroupFrom(String id) {
    artefact_group_id = id;
    if (isNull(artefact_group_id)) return;
    loadArtefactGroupAttributes();
    showTabGroup("Artefact_Group", artefact_group_id);
}

autoNumArtefactGroup(){
    // todo: dumb autonumbering
    // Object autoNum = fetchOne(""+
    //     "select freetext||'-A'||foo as response, foo  "+
    //     "  from (select substr(freetext,6)+1 as foo  "+
    //     "          from latestnondeletedarchentidentifiers  "+
    //     "         where uuid in (select uuid  "+
    //     "                          from latestnondeletedaentreln  "+
    //     "                         where relationshipid in (select distinct relationshipid  "+
    //     "                                                   from latestnondeletedaentreln join latestnondeletedrelationship using (relationshipid)  "+
    //     "                                                   join relntype using (relntypeid) "+
    //     "                                                  where uuid = "+context_id+"  "+
    //     "                                                    and relntypename = 'ContextArtefactGroup')   "+
    //     "                           and uuid != "+context_id+")),  "+
    //     "       (select freetext  "+
    //     "          from latestnondeletedarchentidentifiers  "+
    //     "         where uuid = "+context_id+"  "+
    //     "           and attributename = 'Context ID') as contexta "+
    //     " where response not in (select freetext  "+
    //     "                          from latestnondeletedarchentidentifiers  "+
    //     "                         where freetext is not null) "+
    //     " union select freetext||'-A1', -1 from "+ 
    //     "       (select freetext  "+
    //     "          from latestnondeletedarchentidentifiers  "+
    //     "         where uuid = "+context_id+"  "+
    //     "           and attributename = 'Context ID') as contextb "+
    //     " order by foo desc "+
    //     " limit 1; ");

    // setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Group_ID", autoNum.get(0));
}

saveArtefactGroup() {
    if (isNull(getFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Group_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (!isNull(artefact_group_id)) {
        entity = fetchArchEnt(artefact_group_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Artefact Group cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
        saveTabGroup("Artefact_Group", artefact_group_id, null, null, "artefact_group_id = getLastSavedRecordId(); onArtefactGroupSaved(); cancelTabGroup(\"Artefact_Group\", false); showTab(\"Context/Context_Artefacts\");");
    }
}

saveAndNewArtefactGroup(){
    if (isNull(getFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Group_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }

    if (!isNull(artefact_group_id)) {
        entity = fetchArchEnt(artefact_group_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Artefact Group cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
       saveTabGroup("Artefact_Group", artefact_group_id, null, null, "artefact_group_id = getLastSavedRecordId(); onArtefactGroupSaved(); newArtefactGroup();");
    }
}

duplicateArtefactGroup(){
    if (isNull(getFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Group_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }

    if (!isNull(artefact_group_id)) {
        entity = fetchArchEnt(artefact_group_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Artefact Group cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
       saveTabGroup("Artefact_Group", artefact_group_id, null, null, "artefact_group_id = getLastSavedRecordId(); onArtefactGroupSaved(); artefact_group_id=null; autoNumArtefactGroup();");
    }
}

onArtefactGroupSaved(){
    artefact_group_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextArtefactGroup", context_id, artefact_group_id);
    showToast("Associated with Context");
}

deleteArtefactGroupFromContext(){
    artefact_group_id = getFieldValue("Context/Context_Artefacts/artefactGroupList");
    if (!isNull(artefact_group_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Artefact Group!", "reallyDeleteArtefactGroup()", "doNotDelete()");
    }
}

deleteArtefactGroup(){
    if (!isNull(artefact_group_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Artefact Group!", "reallyDeleteArtefactGroup()", "doNotDelete()");
    } else {
        cancelTabGroup("Artefact_Group", true);
        showTab("Context/Context_Artefacts");
    }
}

reallyDeleteArtefactGroup(){
    deleteArchEnt(artefact_group_id);
    showTabGroup("Artefact_Group");
    cancelTabGroup("Artefact_Group", false);
    showTab("Context/Context_Artefacts");
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadArtefactGroupAttributes(){
    populateHierarchicalDropDown("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Class", "Artefact Class");
}


/*** Sample ***/
onEvent("Sample/Sample_Attachments/attachPhoto", "click", "attachPictureTo(\"Sample/Sample_Attachments/Photo\")");
onEvent("Sample/Sample_Attachments/attachAudio", "click", "attachAudioTo(\"Sample/Sample_Attachments/Audio\")");
onEvent("Sample/Sample_Attachments/attachVideo", "click", "attachVideoTo(\"Sample/Sample_Attachments/Video\")");
onEvent("Sample/Sample_Attachments/attachSketch", "click", "attachFileTo(\"Sample/Sample_Attachments/Sketch\")");
onEvent("Sample/Sample_Attachments/viewattached", "click", "viewArchEntAttachedFiles(sample_id)");
onEvent("Sample/Sample_Attachments/Update", "delayclick", "saveSample()");
onEvent("Sample/Sample_Attachments/Delete", "delayclick", "deleteSample()");
onEvent("Sample/Sample_Attachments/SaveAndNew", "delayclick", "saveAndNewSample()");
onEvent("Sample/Sample_Attachments/Duplicate", "delayclick", "duplicateSample()");
onEvent("Sample/Sample_GeneralInformation/Update", "delayclick", "saveSample()");
onEvent("Sample/Sample_GeneralInformation/Delete", "delayclick", "deleteSample()");
onEvent("Sample/Sample_GeneralInformation/SaveAndNew", "delayclick", "saveAndNewSample()");
onEvent("Sample/Sample_GeneralInformation/Duplicate", "delayclick", "duplicateSample()");

String sample_id = null;

newSample(){
    sample_id = null;
    newTabGroup("Sample");
    setFieldValue("Sample/Sample_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    // todo: same as in others
    // date = fetchOne("select date('now');");
    // setFieldValue("Sample/Sample_GeneralInformation/Site_Code","BK" + date.get(0).charAt(2) + date.get(0).charAt(3));
}

loadSample() {
    sample_id = getListItemValue();
    loadSampleFrom(sample_id);
}

loadSampleFrom(String id) {
    sample_id = id;
    if (isNull(sample_id)) return;
    loadSampleAttributes();
    showTabGroup("Sample", sample_id);
}

saveSample() {
    if (isNull(getFieldValue("Sample/Sample_GeneralInformation/Sample_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(sample_id)) {
        entity = fetchArchEnt(sample_id);
    }
    if(menu) {
        saveTabGroup("Sample", sample_id, null, null, "sample_id = getLastSavedRecordId(); cancelTabGroup(\"Sample\", false); showTab(\"control/sample\")");
    } else {
        saveTabGroup("Sample", sample_id, null, null, "sample_id = getLastSavedRecordId(); onSampleSaved(); cancelTabGroup(\"Sample\", false); showTab(\"Context/Context_Samples\")");
    }
    
}

saveAndNewSample() {
    if (isNull(getFieldValue("Sample/Sample_GeneralInformation/Sample_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (!isNull(sample_id)) {
        entity = fetchArchEnt(sample_id);
    }
    if(menu) {
        saveTabGroup("Sample", sample_id, null, null, "sample_id = getLastSavedRecordId(); cancelTabGroup(\"Sample\", false); showTab(\"control/sample\"); showToast(\"Cannot create new Sample from main menu.\");");    
    } else {
        saveTabGroup("Sample", sample_id, null, null, "sample_id = getLastSavedRecordId(); onSampleSaved(); newSample();");    
    }
}

duplicateSample(){
    if (isNull(getFieldValue("Sample/Sample_GeneralInformation/Sample_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }

    if (!isNull(sample_id)) {
        entity = fetchArchEnt(sample_id);
    }
    if(menu) {
        saveTabGroup("Sample", sample_id, null, null, "sample_id = getLastSavedRecordId(); cancelTabGroup(\"Sample\", false); showTab(\"control/sample\"); showToast(\"Cannot create new Sample from main menu.\");");    
    } else {
        saveTabGroup("Sample", sample_id, null, null, "sample_id = getLastSavedRecordId(); onSampleSaved(); sample_id = null;");
    }
    
}

onSampleSaved(){
    sample_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextSample", context_id, sample_id);
}

deleteSampleFromContext(){
    sample_id = getFieldValue("Context/Context_Samples/sampleList");
    if (!isNull(sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Sample!", "reallyDeleteSample()", "doNotDelete()");
    }
}

deleteSample(){
    if (!isNull(sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Sample!", "reallyDeleteSample()", "doNotDelete()");
    } else {
         cancelTabGroup("Sample", true);
    }
}

reallyDeleteSample(){
    deleteArchEnt(sample_id);
    showTabGroup("Sample");
    cancelTabGroup("Sample", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadSampleAttributes(){
    populateDropDown("Sample/Sample_GeneralInformation/Sample_Type", makeVocab("Sample Type"));
    populateDropDown("Sample/Sample_GeneralInformation/Sample_Location", makeVocab("Sample Location"));
}

/*** Matrix ***/
onEvent("Matrix/Matrix/Update", "delayclick", "saveMatrix()");
onEvent("Matrix/Matrix/Delete", "delayclick", "deleteMatrix()");
onEvent("Matrix/Matrix/SaveAndNew", "delayclick", "saveAndNewMatrix()");

String matrix_id = null;

newMatrix(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    matrix_id = null;
    newTabGroup("Matrix");
}

loadMatrix() {
    matrix_id = getFieldValue("Context/Context_Deposits/matrixList");
    loadMatrixFrom(matrix_id);
}

loadMatrixFrom(String id) {
    matrix_id = id;
    if (isNull(matrix_id)) return;
    loadMatrixAttributes();
    showTabGroup("Matrix", matrix_id);
}

saveMatrix() {
    if (isNull(getFieldValue("Matrix/Matrix/Component")) || isNull(getFieldValue("Matrix/Matrix/Percentage"))) {
        showWarning("Logic Error", "Cannot save Matrix without Component or Percentage");
        return;
    }
    
    if (!isNull(matrix_id)) {
        entity = fetchArchEnt(matrix_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Matrix cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
        String percentage = getFieldValue("Matrix/Matrix/Percentage");
        if(percentage.charAt(percentage.length()-1) != '%') {
            percentage = percentage + "%";
            setFieldValue("Matrix/Matrix/Percentage", percentage);
        }
        saveTabGroup("Matrix", matrix_id, null, null, "matrix_id = getLastSavedRecordId(); onMatrixSaved(); cancelTabGroup(\"Matrix\", false); showTab(\"Context/Context_Deposits\");");
    }
}

saveAndNewMatrix() {
    if (isNull(getFieldValue("Matrix/Matrix/Component")) || isNull(getFieldValue("Matrix/Matrix/Percentage"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (!isNull(matrix_id)) {
        entity = fetchArchEnt(matrix_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Matrix cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
        String percentage = getFieldValue("Matrix/Matrix/Percentage");
        if(percentage.charAt(percentage.length()-1) != '%') {
            percentage = percentage + "%";
            setFieldValue("Matrix/Matrix/Percentage", percentage);
        }
       saveTabGroup("Matrix", matrix_id, null, null, "matrix_id = getLastSavedRecordId(); onMatrixSaved(); newMatrix();");
    }
}

onMatrixSaved(){
    matrix_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextMatrix", context_id, matrix_id);

}

deleteMatrixFromContext(){
    matrix_id = getFieldValue("Context/Context_Deposits/matrixList");
    if (!isNull(matrix_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Matrix!", "reallyDeleteMatrix()", "doNotDelete()");
    }
}

deleteMatrix(){
    if (!isNull(matrix_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Matrix!", "reallyDeleteMatrix()", "doNotDelete()");
    } else {
        cancelTabGroup("Matrix", true);
        showTab("Context/Context_Deposits");
    }
}

reallyDeleteMatrix(){
    deleteArchEnt(matrix_id);
    showTabGroup("Matrix");
    cancelTabGroup("Matrix", false);
    showTab("Context/Context_Deposits");
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadMatrixAttributes(){
    populateDropDown("Matrix/Matrix/Component", makeVocab("Component"));
    populateHierarchicalPictureGallery("Matrix/Matrix/Shape", "Shape");
}

/*** Special Find ***/
onEvent("Special_Find/Special_Find_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Special_Find/Special_Find_GeneralInformation/Photo\")");
onEvent("Special_Find/Special_Find_GeneralInformation/attachAudio", "click", "attachAudioTo(\"Special_Find/Special_Find_GeneralInformation/Audio\")");
onEvent("Special_Find/Special_Find_GeneralInformation/attachVideo", "click", "attachVideoTo(\"Special_Find/Special_Find_GeneralInformation/Video\")");
onEvent("Special_Find/Special_Find_GeneralInformation/Update", "delayclick", "saveSpecialFind()");
onEvent("Special_Find/Special_Find_GeneralInformation/Delete", "delayclick", "deleteSpecialFind()");
onEvent("Special_Find/Special_Find_GeneralInformation/SaveAndNew", "delayclick", "saveAndNewSpecialFind()");
onEvent("Special_Find/Special_Find_GeneralInformation/Duplicate", "delayclick", "duplicateSpecialFind()");

String special_find_id = null;

newSpecialFind(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    special_find_id = null;
    newTabGroup("Special_Find");
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    // todo: same as in others
    // date = fetchOne("select date('now');");
    // setFieldValue("Special_Find/Special_Find_GeneralInformation/Site_Code","BK" + date.get(0).charAt(2) + date.get(0).charAt(3));
    specialFindAutoNum();
}

loadSpecialFind() {
    special_find_id = getListItemValue();
    loadSpecialFindFrom(special_find_id);
}

loadSpecialFindFrom(String id) {
    special_find_id = id;
    if (isNull(special_find_id)) return;
    loadSpecialFindAttributes();
    showTabGroup("Special_Find", special_find_id);
}

specialFindAutoNum(){
    // todo: dumb autonumbering
    // Object autoNum = fetchOne(""+
    //     "select freetext||'-SF'||foo as response, foo  "+
    //     "  from (select substr(freetext,7)+1 as foo  "+
    //     "          from latestnondeletedarchentidentifiers  "+
    //     "         where uuid in (select uuid  "+
    //     "                          from latestnondeletedaentreln  "+
    //     "                         where relationshipid in (select distinct relationshipid  "+
    //     "                                                   from latestnondeletedaentreln join latestnondeletedrelationship using (relationshipid)  "+
    //     "                                                   join relntype using (relntypeid) "+
    //     "                                                  where uuid = "+context_id+"  "+
    //     "                                                    and relntypename = 'ContextSpecialFind')   "+
    //     "                           and uuid != "+context_id+")),  "+
    //     "       (select freetext  "+
    //     "          from latestnondeletedarchentidentifiers  "+
    //     "         where uuid = "+context_id+"  "+
    //     "           and attributename = 'Context ID') as contexta "+
    //     " where response not in (select freetext  "+
    //     "                          from latestnondeletedarchentidentifiers  "+
    //     "                         where freetext is not null) "+
    //     " union select freetext||'-SF1', -1 from "+ 
    //     "       (select freetext  "+
    //     "          from latestnondeletedarchentidentifiers  "+
    //     "         where uuid = "+context_id+"  "+
    //     "           and attributename = 'Context ID') as contextb "+
    //     " order by foo desc "+
    //     " limit 1; ");
    // setFieldValue("Special_Find/Special_Find_GeneralInformation/Special_Find_ID", autoNum.get(0));
}


saveSpecialFind() {
    if (isNull(getFieldValue("Special_Find/Special_Find_GeneralInformation/Special_Find_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(special_find_id)) {
        entity = fetchArchEnt(special_find_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Special_Find cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
       saveTabGroup("Special_Find", special_find_id, null, null, "special_find_id = getLastSavedRecordId(); onSpecialFindSaved(); cancelTabGroup(\"Special_Find\", false); showTab(\"Context/Context_Artefacts\");");
    }
}

saveAndNewSpecialFind() {
    if (isNull(getFieldValue("Special_Find/Special_Find_GeneralInformation/Special_Find_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (!isNull(special_find_id)) {
        entity = fetchArchEnt(special_find_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Special_Find cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
       saveTabGroup("Special_Find", special_find_id, null, null, "special_find_id = getLastSavedRecordId(); onSpecialFindSaved(); newSpecialFind();");
    }
}

duplicateSpecialFind(){
    if (isNull(getFieldValue("Special_Find/Special_Find_GeneralInformation/Special_Find_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }

    if (!isNull(special_find_id)) {
        entity = fetchArchEnt(special_find_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Special_Find cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
       saveTabGroup("Special_Find", special_find_id, null, null, "special_find_id = getLastSavedRecordId(); onSpecialFindSaved(); special_find_id = null; specialFindAutoNum();");
    }
}

onSpecialFindSaved(){
    special_find_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextSpecialFind", context_id, special_find_id);

}

deleteSpecialFindFromContext(){
    special_find_id = getFieldValue("Context/Context_Artefacts/specialFindList");
    if (!isNull(special_find_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Special Find!", "reallyDeleteSpecialFind()", "doNotDelete()");
    }
}

deleteSpecialFind(){
    if (!isNull(special_find_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Special Find!", "reallyDeleteSpecialFind()", "doNotDelete()");
    } else {
        cancelTabGroup("Special_Find", true);
        showTab("Context/Context_Artefacts");
    }
}

reallyDeleteSpecialFind(){
    deleteArchEnt(special_find_id);
    showTabGroup("Special_Find");
    cancelTabGroup("Special_Find", false);
    showTab("Context/Context_Artefacts");
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadSpecialFindAttributes(){
    populateHierarchicalDropDown("Special_Find/Special_Find_GeneralInformation/Special_Find_Class", "Special Find Class");
}

/*** Arch Ent: PhotoLog ***/
onEvent("Photograph_Log", "show", "addNavigationButtons(\"Photograph_Log\"); keepTabGroupChanges(\"Photograph_Log\"); savePhotoLog(\"\");");

String photolog_id = null;

newPhotoLog(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    photolog_id = null;
    newTabGroup("Photograph_Log");
    setFieldValue("Photograph_Log/Photograph_Log/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Photograph_Log/Photograph_Log/Device_Code", getFieldValue("Context/Context_GeneralInformation/Device_Code"));
}

loadPhotoLog() {
    photolog_id = getFieldValue("Context/Context_Attachments/PhotoLogList");
    loadPhotoLogFrom(photolog_id);
}

loadPhotoLogFrom(String id) {
    photolog_id = id;
    if (isNull(photolog_id)) return;
    showTabGroup("Photograph_Log", photolog_id);
}

// todo: incorporate the following load into the context group event handling using the loadPhotoLogFrom(id) function
// loadContextGroupPhotoLog() {
//     photolog_id = getFieldValue("ContextGroup/ContextGroup_Attachments/PhotoLogList");
//     if (isNull(photolog_id)) return;
//     showTabGroup("Photograph_Log", photolog_id);
// }

loadPhotoLogAttributes(){
    makeVocab("DropDown", "Photograph_Log/Photograph_Log/Device_Code", "Device Code");
}

savePhotoLog(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    // TODO: does this photolog have area code and site code attributes/properties?
    // attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/AreaCode"), null, null));
    // attributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));
    saveTabGroup("Photograph_Log", photolog_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            photolog_id = uuid;
            if (newRecord) {
              onPhotoLogSaved();
            }            
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onPhotoLogSaved(){
    saveEntitiesToRel("ContextPhotographLog", context_id, photolog_id);
    showToast("{Associated_with_Context}");

}

deletePhotoLogFromContext(){
    photolog_id = getFieldValue("Context/Context_Attachments/PhotoLogList");
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Photograph_Log}", "reallyDeletePhotoLog()", "doNotDelete()");
    }
}

deletePhotoLog(){
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Photograph_Log}", "reallyDeletePhotoLog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photograph_Log", true);
    }
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

/** Action Bar **/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
    actionOnLabel() {
      "{Clean_Synced_Files}";
    }
    actionOn() {
      cleanSyncedFiles();
    }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Sync}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Enable_Sync}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
        updateGPSDiagnostics();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{Internal_GPS_Enabled}");
        updateGPSDiagnostics();
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_External_GPS}";
    }
    actionOn() {
        stopGPS();
        if (isBluetoothConnected()) {
          showToast("{External_GPS_Disabled}");
        } else {
          showToast("{Please_Enable_Bluetooth}");
        }
        updateGPSDiagnostics();
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_External_GPS}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{External_GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.actionOn();
        }
        updateGPSDiagnostics();
    }
});

/*** Navigation Drawer ***/
removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
}

addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(!isNull(getRecordId(tabgroup))) {
          newRecord(tabgroup);
          showToast("{New_record_created}");
      } else {
          showAlert("{Warning}", "{Any_unsaved_changes_will_be_lost}", "newRecord(\""+tabgroup+"\")", "");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getRecordId(tabgroup))) {
          duplicateRecord(tabgroup);
      } else {
          showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup, getRecordId(tabgroup));
    }
  }, "danger");
}

// Returns the record id of the given tabgroup
getRecordId(String tabgroup) {
  if (tabgroup.equals("Context")) {
    return context_id;
  } else if (tabgroup.equals("ContextGroup")) {
    return context_group_id;
  } else if (tabgroup.equals("Artefact_Group")) {
    return artefact_group_id;
  } else if (tabgroup.equals("Sample")) {
    return sample_id;
  } else if (tabgroup.equals("Matrix")) {
    return matrix_id;
  } else if (tabgroup.equals("Special_Find")) {
    return special_find_id;
  } else if (tabgroup.equals("Photograph_Log")) {
    return photolog_id;
  } else {
    Log.e("PAZC Module", "Can't get the record id for the tabgroup '"+tabgroup+"'");
    return;
  }
}

// Makes a new record of the given tabgroup
newRecord(String tabgroup) {
  if (tabgroup.equals("Context")) {
    cancelTabGroup(tabgroup, false);
    newContext();
  } else if (tabgroup.equals("ContextGroup")) {
    cancelTabGroup(tabgroup, false);
    newContextGroup(true);
  } else if (tabgroup.equals("Artefact_Group")) {
    cancelTabGroup(tabgroup, false);
    newArtefactGroup();
  } else if (tabgroup.equals("Sample")) {
    cancelTabGroup(tabgroup, false);
    newSample();
  } else if (tabgroup.equals("Matrix")) {
    cancelTabGroup(tabgroup, false);
    newMatrix();
  } else if (tabgroup.equals("Special_Find")) {
    cancelTabGroup(tabgroup, false);
    newSpecialFind();
  } else if (tabgroup.equals("Photograph_Log")) {
    cancelTabGroup(tabgroup, false);
    newPhotoLog();
  } else {
    Log.e("PAZC Module", "Can't make new record for the tabgroup '"+tabgroup+"'");
    return;
  }
}

// Deletes the current record of the given tabgroup
deleteRecord(String tabgroup, String id) {
  if (tabgroup.equals("Context")) {
    deleteContext();
  } else if (tabgroup.equals("ContextGroup")) {
    deleteContextGroup();
  } else if (tabgroup.equals("Artefact_Group")) {
    deleteArtefactGroup();
  } else if (tabgroup.equals("Sample")) {
    deleteSample();
  } else if (tabgroup.equals("Matrix")) {
    deleteMatrix();
  } else if (tabgroup.equals("Special_Find")) {
    deleteSpecialFind();
  } else if (tabgroup.equals("Photograph_Log")) {
    deletePhotoLog();
  } else {
    Log.e("PAZC Module", "Can't delete the record for the tabgroup '"+tabgroup+"' of id '"+id+"'");
    return;
  }
}

// Duplicates the current record of the given tabgroup
duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "please wait");
  Log.d("duplicateRecord", tabgroup);

  if (tabgroup.equals("Context")) {
    duplicateContext();
  } else if (tabgroup.equals("ContextGroup")) {
    duplicateContextGroup();
  } else if (tabgroup.equals("Artefact_Group")) {
    duplicateArtefactGroup();
  } else if (tabgroup.equals("Sample")) {
    duplicateSample();
  } else if (tabgroup.equals("Matrix")) {
    duplicateMatrix();
  } else if (tabgroup.equals("Special_Find")) {
    duplicateSpecialFind();
  } else if (tabgroup.equals("Photograph_Log")) {
    duplicatePhotoLog();
  } else {
    Log.e("PAZC Module", "Can't make duplicate the record for the tabgroup '"+tabgroup+"'");
    dialog.dismiss();
    return;
  }
}

// generic fetch saved attributes query
getDuplicateAttributeQuery(String originalRecordID) {
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
    " FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
    " WHERE attributename IN ('Trench', 'Site Code') " + 
    " AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, childuuid "+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE parentuuid = '"+originalRecordID+"';";
  return dupeRelnQuery;

}

// generic get extra attributes
getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("PAZC Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(createEntityAttribute(savedAttribute.get(0), savedAttribute.get(1), savedAttribute.get(2), savedAttribute.get(3), savedAttribute.get(4)));
  }
  return extraAttributes;
}

makeDuplicateRelationships(fetchedAttributes, String newuuid){
    for (savedAttribute : fetchedAttributes){
        //    saveEntitiesToHierRel(relnname, parent, child, parentverb, childverb, relSaveCallback);
        //relntypename, parentparticipatesverb, childparticipatesverb, childuuid
        saveEntitiesToHierRel(savedAttribute.get(0), newuuid, savedAttribute.get(3), savedAttribute.get(1), savedAttribute.get(2), null);
    }
}

duplicateContext() {

  List extraAttributes = createAttributeList();
  extraAttributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));    

  disableAutoSave("Context");
  populateCameraPictureGallery("Context/Context_Attachments/Photo", new ArrayList());
  populateFileList("Context/Context_Attachments/Sketch", new ArrayList());
  setFieldValue("Context/Context_GeneralInformation/Context_ID", getFieldValue("control/data/ContextIncrement")); 
  incField("control/data/ContextIncrement");


  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      context_id = uuid;
      
      Boolean enable_autosave = true;
      showToast("{Duplicated_record}");
      dialog.dismiss();
      saveTabGroup("Context", context_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          context_id = autosaveUuid;
          //intentionally did not duplicate children of context.
        }
      }, enable_autosave);
    }
  };

  excludeAttributes = new ArrayList();
  excludeAttributes.add("Photo");
  excludeAttributes.add("Sketch");
  duplicateTabGroup("Context", null, extraAttributes, excludeAttributes, saveCallback);
    
}

duplicateContextGroup() {

  disableAutoSave("ContextGroup");
  //setFieldValue("ContextGroup/ContextGroup_Details/Title", null);

  List extraAttributes = createAttributeList();
  extraAttributes.add(createEntityAttribute("Site Code", null, null, moduleSiteCode, null));

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      context_group_id = uuid;
      Boolean enable_autosave = true;
      showToast("{Duplicated_record}"); 
      dialog.dismiss();
     
      saveTabGroup("ContextGroup", context_group_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          context_group_id = autosaveUuid;
          //again, didn't choose to duplicate child contexts.
        }
      }, enable_autosave);
    }
  };

  duplicateTabGroup("ContextGroup", null, extraAttributes, null, saveCallback);
  
}

duplicateArtefactGroup() {
  disableAutoSave("Artefact_Group");

  populateCameraPictureGallery("Artefact_Group/Artefact_Group_GeneralInformation/Photo", new ArrayList());
  populateFileList("Artefact_Group/Artefact_Group_GeneralInformation/Sketch", new ArrayList());
  setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Group_ID", getFieldValue("control/data/Artefact_Group_Starting_ID")); 
  incField("control/data/Artefact_Group_Starting_ID", 1);

  String oldArtefact_ID = artefact_group_id;

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      artefact_group_id = uuid;
      Boolean enable_autosave = true;
      fetchAll(getDuplicateRelnQuery(oldArtefact_ID), new FetchCallback(){
        onFetch(result) {
            makeDuplicateRelationships(result, artefact_group_id);
            dialog.dismiss();
            showToast("{Duplicated_record}"); 
        }
      });
   

      saveTabGroup("Artefact_Group", artefact_group_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          artefact_group_id = autosaveUuid;       
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(artefact_group_id), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("Trench");
      //excludeAttributes.add("Site Code");
      excludeAttributes.add("Photo");
      excludeAttributes.add("Sketch");
      duplicateTabGroup("Artefact_Group", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

duplicateSample() {
  String oldSample_ID = sample_id;

  disableAutoSave("Sample");
  populateCameraPictureGallery("Sample/Sample_GeneralInformation/Photo", new ArrayList());
  populateFileList("Sample/Sample_GeneralInformation/Sketch", new ArrayList());      
  setFieldValue("Sample/Sample_GeneralInformation/Sample_ID", getFieldValue("control/data/Sample_Starting_ID")); 
  incField("control/data/Sample_Starting_ID", 1);

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      sample_id = uuid;
      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(oldSample_ID), new FetchCallback(){
        onFetch(result) {
          makeDuplicateRelationships(result, sample_id);
          showToast("{Duplicated_record}");
          dialog.dismiss();          
        }
      });


      saveTabGroup("Sample", sample_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          sample_id = autosaveUuid;
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(sample_id), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("Trench");
      //excludeAttributes.add("Site Code");
      excludeAttributes.add("Photo");
      excludeAttributes.add("Sketch");
      duplicateTabGroup("Sample", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

duplicateMatrix() {
  String oldMatrix_ID = matrix_id;
  disableAutoSave("Matrix");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      matrix_id = uuid;
      Boolean enable_autosave = true;
      fetchAll(getDuplicateRelnQuery(oldMatrix_ID), new FetchCallback(){
          onFetch(result) {
            makeDuplicateRelationships(result, matrix_id);
            dialog.dismiss();
            showToast("{Duplicated_record}");
          }
        });
      saveTabGroup("Matrix", matrix_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          matrix_id = autosaveUuid;          
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(matrix_id), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("Trench");
      duplicateTabGroup("Matrix", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

duplicateSpecialFind() {
  disableAutoSave("Special_Find");

  populateCameraPictureGallery("Special_Find/Special_Find_GeneralInformation/Photo", new ArrayList());
  setFieldValue("Special_Find/Special_Find_GeneralInformation/Special_Find_ID", getFieldValue("control/data/SpecialFind_Starting_ID")); 
  incField("control/data/SpecialFind_Starting_ID", 1);

  String oldSpecialFind_ID = special_find_id;
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      special_find_id = uuid;
      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(oldSpecialFind_ID), new FetchCallback(){
        onFetch(result) {
          makeDuplicateRelationships(result, special_find_id);
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });
      saveTabGroup("Special_Find", special_find_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          special_find_id = autosaveUuid;
          
          populateCameraPictureGallery("Sample/Sample_GeneralInformation/Photo", new ArrayList());
          
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(special_find_id), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("Trench");
      //excludeAttributes.add("Site Code");
      excludeAttributes.add("Photo");
      duplicateTabGroup("Special_Find", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

duplicatePhotoLog() {
  disableAutoSave("Photograph_Log");

  String oldPhotolog_ID = photolog_id;
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      photolog_id = uuid;
      Boolean enable_autosave = true;
      fetchAll(getDuplicateRelnQuery(oldPhotolog_ID), new FetchCallback(){
          onFetch(result) {
              makeDuplicateRelationships(result, photolog_id);
              showToast("{Duplicated_record}");
              dialog.dismiss();
          }
        }); 

      saveTabGroup("Photograph_Log", photolog_id, null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          photolog_id = autosaveUuid;          
        }
      }, enable_autosave);
    }
  };

  fetchAll(getDuplicateAttributeQuery(photolog_id), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      //excludeAttributes.add("Trench");
      //excludeAttributes.add("Site Code");
      duplicateTabGroup("Photograph_Log", null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

/*** GPS ***/

updateGPSDiagnostics() {
    String status = "";
    String previousStatus = getFieldValue("control/data/GPS_Diagnostics");
    String notInitialised = "{GPS_is_not_initialised}";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            String error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
            // check that error message wasn't previously appended to the previous status message.
            if (previousStatus.length() < error.length() ||
                    previousStatus.subSequence(0, error.length()).equals(error)) {
                status = previousStatus;
            } else {
                status = error + "\n" + previousStatus;
            }
        } else {
            status = notInitialised;
        }
    } else {
        status += "{Internal_GPS}: ";
        if (isInternalGPSOn())
        {
            status += "{on}";
        } else {
            status += "{off}";
        }
        status += "\nExternal GPS: ";
        if (isExternalGPSOn())
        {
            if (isBluetoothConnected()) {
                status += "{on_and_bluetooth_connected}";
            } else {
                status += "{on_and_bluetooth_disconnected}";
            }
        } else {
            status += "{off}";
        }
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\n{Latitude}: " + position.getLatitude();
            status += "   {Longitude}: " + position.getLongitude();
            status += "\n{Northing}: " + projPosition.getLatitude();
            status += "   {Easting}: " + projPosition.getLongitude();
            status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
        } else {
            status += "\n{Position}: {no_GPS_position_could_be_found}";
        }
    }
    setFieldValue("control/data/GPS_Diagnostics", status);
}


/*** SYNC ***/
setSyncMinInterval(120.0f);
setSyncMaxInterval(600.0f);
setSyncDelay(5.0f);

// TODO: Delete this paragraph after development is complete.
setSyncMinInterval(4.0f);
setSyncMaxInterval(6.0f);
setSyncDelay(5.0f);
setSyncEnabled(true);
setFileSyncEnabled(true);


/*** 'Uneditable' - you can edit the code below with extreme precaution ***/

/*** USER ***/


populateListForUsers(){
    // Populate user dropdown

    String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                     "  FROM user "+
                                     " WHERE userdeleted is null;";

    fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
        onFetch(result) {
            populateDropDown("user/usertab/users", result, true);
            String userQ = localSettingsQuery("User_VocabID");
            fetchOne(userQ, new FetchCallback() {
              onFetch(result) {
                if (!isNull(result)) {
                  setFieldValue("user/usertab/users", result.get(0));
                }
              }  
            });
        }
    });
}

String username = "";
String device = "";
String areaCode = "";

login(){
    if(isNull(getFieldValue("user/usertab/Area_Code")) || isNull(getFieldValue("user/usertab/users")) || isNull(getFieldValue("user/usertab/Device_Code"))){
        showWarning("{Warning}", "{Please_select_a_User_and_an_Area_Code_and_a_Device_Code_before_logging_in}");
        return;
    } else {
        String userVocabId = getFieldValue("user/usertab/users");
        fetchOne("SELECT userid,fname,lname,email FROM user WHERE userid='" + userVocabId + "';", new FetchCallback() {
            onFetch(result) {
                user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
                setUser(user);
                username = result.get(1) + " " + result.get(2);

                showTabGroup("control");
                loadStartingIds();
            }

        });

        // store the user and area code into local settings, and set the globals
        areaCode = getFieldValue("user/usertab/Area_Code");
        device = getFieldValue("user/usertab/Device_Code");
        saveLoginDetails();
    }
}

saveLoginDetails() {
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('User_VocabID', '"+getFieldValue("user/usertab/users")+"');");
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('Trench_VocabID', '"+getFieldValue("user/usertab/Area_Code")+"');");
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('DeviceCode_VocabID', '"+getFieldValue("user/usertab/Device_Code")+"');");
  fetchOne("REPLACE INTO localsettings(key, value) SELECT 'Trench_VocabName', vocabname FROM vocabulary WHERE vocabid = "+getFieldValue("user/usertab/Area_Code")+";");
  fetchOne("REPLACE INTO localsettings(key, value) SELECT 'DeviceCode_VocabName', vocabname FROM vocabulary WHERE vocabid = "+getFieldValue("user/usertab/Device_Code")+";");
}

localSettingsQuery(String key) {
  return "select vocabid, vocabname from vocabulary join localSettings on (value=vocabid) where key = '"+key+"' ";
}

insertIntoLocalSettings(String key, String val) {
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('" + key + "', '" + val + "');");
}
insertIntoLocalSettings(String key, Integer val) {
    insertIntoLocalSettings(key, Integer.toString(val));
}

loadLoginDetails() {
  String userQ = localSettingsQuery("User_VocabID");
  String areaCodeQ = localSettingsQuery("Trench_VocabID");
  String deviceCodeQ = localSettingsQuery("DeviceCode_VocabID");
  fetchOne(userQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/users", result.get(0));
      }
    }  
  });
  fetchOne(areaCodeQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/Area_Code", result.get(0));
      }
    }  
  });
  fetchOne(deviceCodeQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/Device_Code", result.get(0));
      }
    }  
  });
}

loadStartingIds() {
    List l = new ArrayList();
    l.add("control/data/Artefact_Group_Starting_ID");
    l.add("control/data/SpecialFind_Starting_ID");
    l.add("control/data/ContextIncrement");
    l.add("control/data/Sample_Starting_ID");

    for (ref : l) {
        loadStartingId(ref);
    }
    for (ref : l) {
        onFocus(ref, null,  "insertIntoLocalSettings(\"" + ref + "\", getFieldValue(\"" + ref + "\"));");
    }
}

loadStartingId(String ref) {
    String idQ = "SELECT value FROM localSettings WHERE key = '" + ref + "';";
    fetchOne(idQ, new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                setFieldValue(ref, result.get(0));
            } else {
                setFieldValue(ref, "1");
            }
        }
    });
}

onEvent("user", "load", "loadLoginDetails()");
onEvent("user", "show", "removeNavigationButtons()");
onEvent("user/usertab/", "show", "populateListForUsers()");
onEvent("user/usertab/login", "click", "login()");
onEvent("user/usertab/guide", "click", "showTab(\"user/help\")");

/*** end user login code ***/


/*** MISC ***/

/** Vocab Population -- copied from lake mungo.**/
/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/*** 'Editable' - you can edit the code below based on the needs ***/
/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, true);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

/** Entity Relationship Saving **/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

/** MODULE INITIALISATION **/

// Stuff that needs to happen after everything.
initialiseModule() {
    makeVocab("DropDown", "user/usertab/Area_Code", "Trench");
    makeVocab("DropDown", "user/usertab/Device_Code", "Device Code");
    makeVocab("DropDown", "control/search/Area_Code", "Trench");
    // loadSearchAttributes();
    // loadContextAttributes();
    // loadContextGroupAttributes();
    // loadArtefactGroupAttributes();
    // loadSampleAttributes();
    // loadMatrixAttributes();
    // loadSpecialFindAttributes();
    // loadPhotoLogAttributes();
}

initialiseModule();
